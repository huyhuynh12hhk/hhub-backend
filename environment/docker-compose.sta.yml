services:

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.0.0
    container_name: es
    environment:
      - node.name=es01
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    ulimits:
      memlock:
        soft: -1
        hard: -1
#    volumes:
#      - ./environment/dev/elk/e:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - hh-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.0.0
    container_name: kibana
    environment:
#      - ELASTICSEARCH_HOSTS=http://es:9200
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    networks:
      - hh-network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - '5800:8080'
    depends_on:
      - kafka
    environment:
      - KAFKA_CLUSTER_0_NAME=env-dev
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - DYNAMIC_CONFIG_ENABLE=true
    networks:
      - hh-network

  kafka:
    image: 'bitnami/kafka:3.7.0'
    container_name: kafka
#    hostname: kafka
    ports:
      - '9094:9094'
      - '9092:9092'
    environment:
      ### General config
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      # Cluster ID
      - KAFKA_KRAFT_CLUSTER_ID=27b03c99f4709c8140aa14
      # Server-side socket listener ports
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      # Advertised listener
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      # Security protocols
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      # Inter broker listener
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Cluster address
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      # Allow plaintext listener (default is false; not recommended for production)
      - ALLOW_PLAINTEXT_LISTENER=yes
      # Set maximum and initial memory
      - KAFKA_HEAP_OPTS=-Xmx512M -Xms256M
      # Enable auto create topic
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      # Message retention period (milliseconds)
      - KAFKA_LOG_RETENTION_MS=604800000 # 7d
      ### Broker config
      - KAFKA_BROKER_ID=1 # ID unique
      - KAFKA_CFG_NODE_ID=1
    networks:
      - hh-network

  gateway:
    container_name: gateway
    image: gateway:${APP_VERSION}
    build:
      context: ../api-gateway
    environment:
      - SPRING_PROFILES_ACTIVE=${ENVIRONMENT:-staging}
    env_file:
      - .env
    ports:
      - "8888:8888"
    networks:
      - hh-network

  auth:
    container_name: auth
    image: auth:${APP_VERSION}
    build:
      context: ../auth-server
    environment:
      - SPRING_PROFILES_ACTIVE=${ENVIRONMENT:-staging}
    env_file:
      - .env
    ports:
      - "9000:9000"
    networks:
      - hh-network

  profile:
    container_name: prof
    image: profile:${APP_VERSION}
    build:
      context: ../profile-service
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-staging}
      - DATABASE_URL=${PROFILE_DB_URL}
    env_file:
      - .env
    ports:
      - "8000:8000"
    networks:
      - hh-network

  blog:
    container_name: blog
    image: blog:${APP_VERSION}
    build:
      context: ../blog-service
      dockerfile: ../blog-service/blog-api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT:-staging}
      - ASPNETCORE_URLS=http://+:5050
#      - DB_CONNECT=${BLOG_DB_URL}
      - MongoDB:ConnectionString=${BLOG_DB_URL}
      - Kafka:BootstrapServers=${KAFKA_SERVICE_URL}
      - Redis:ConnectionString=${REDIS_SERVICE_URL}
      - Jwt:Authority=${AUTH_SERVER_ISSUER}
      - Jwt:TokenUrl=${AUTH_SERVER_URL}/oauth2/token
      - Elastic:BaseUrl=${ELASTIC_URL}
      - Services:Auth=${AUTH_SERVER_URL}
      - Services:Conn=${CONNECTION_SERVICE_URL}
    env_file:
      - .env
    ports:
      - "5050:5050"
    networks:
      - hh-network

  connection:
    container_name: conn
    image: connection:${APP_VERSION}
    build: 
      context: ../connection-service
      dockerfile: Dockerfile
    environment:
      ENV: ${ENVIRONMENT:-staging}
      MYSQL_HOST: ${CONN_DB_HOST}
      MYSQL_PORT: ${CONN_DB_PORT}
      MYSQL_DATABASE: ${CONN_DB_NAME}
      AUTH_URL: ${AUTH_SERVER_URL}
      AUTH_CLIENT: ${AUTH_CLIENT_ID}
      AUTH_SECRET: ${AUTH_CLIENT_SECRET}
      REDIS_ADDRESS: ${REDIS_SERVICE_URL}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    env_file:
      - .env
    ports:
      - "8224:8224"
    networks:
      - hh-network

  notification:
    container_name: noti
    image: notification:${APP_VERSION}
    build:
      context: ../notification-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${ENVIRONMENT:-staging}
    env_file:
      - .env
    ports:
      - "8060:8060"
    networks:
      - hh-network


networks:
  hh-network:
    driver: bridge

