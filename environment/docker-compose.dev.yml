version: '3.8'

services:

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - '5600:8080'
    depends_on:
      - kafka
    environment:
      - KAFKA_CLUSTER_0_NAME=env-dev
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - DYNAMIC_CONFIG_ENABLE=true
    networks:
      - hh-network

  kafka:
    image: 'bitnami/kafka:3.7.0'
    container_name: kafka
    hostname: kafka
    ports:
      - '9094:9094'
      - '9092:9092'
    environment:
      ### General config
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      # Cluster ID
      - KAFKA_KRAFT_CLUSTER_ID=27b03c99f4709c8140aa14
      # Server-side socket listener ports
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      # Advertised listener
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      # Security protocols
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      # Inter broker listener
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Cluster address
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      # Allow plaintext listener (default is false; not recommended for production)
      - ALLOW_PLAINTEXT_LISTENER=yes
      # Set maximum and initial memory
      - KAFKA_HEAP_OPTS=-Xmx512M -Xms256M
      # Enable auto create topic
      - KAKFA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      # Message retention period (milliseconds)
      - KAFKA_LOG_RETENTION_MS=604800000 # 7d
      ### Broker config
      - KAFKA_BROKER_ID=1 # ID unique
      - KAFKA_CFG_NODE_ID=1
    networks:
      - hh-network

  redis:
    container_name: redis
    image: redis:latest
    command:
      - /bin/sh
      - -c
      - redis-server --requirepass ${REDIS_PASSWORD:-""}
    ports:
      - "6339:6379"
    networks:
      - hh-network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - '27017:27017'
    environment:
      - MONGO_INITDB_DATABASE=test
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=123456
    networks:
      - hh-network

  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@system.vn
      - PGADMIN_DEFAULT_PASSWORD=admin123
    restart: always
    ports:
      - '6052:80'
    networks:
      - hh-network

  postgres-db:
    image: postgres:latest
    container_name: postgresdb
    ports:
      - '5432:5432'
    restart: always
    env_file:
      - .env
    networks:
      - hh-network

  mysql-db:
    image: mysql:8.0
    container_name: mysqldb
    cap_add:
      - SYS_NICE
    restart: always
    environment:
      - MYSQL_DATABASE=identity
      - MYSQL_ROOT_PASSWORD=@123456
    ports:
      - '3306:3306'
    networks:
      - hh-network

  mysql-workbench:
    image: lscr.io/linuxserver/mysql-workbench:latest
    cap_add:
      - IPC_LOCK
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - CUSTOM_USER=root
      - PASSWORD=@123456
    ports:
      - 2300:3000
      - 2301:3001
    restart: unless-stopped
    networks:
      - hh-network

  gateway:
    container_name: gateway
    build:
      context: ../api-gateway
    environment:
      - SPRING_PROFILES_ACTIVE=${ENVIRONMENT:-development}
      - JWT_SIGNER_KEY=${JWT_SIGNER_KEY}
    env_file:
      - .env
    ports:
      - "8888:8888"
    networks:
      - hh-network

  identity-api:
    container_name: identity-service
    build:
      context: ../identity-service
    environment:
      - SPRING_PROFILES_ACTIVE=${ENVIRONMENT:-development}
      - JWT_SIGNER_KEY=${JWT_SIGNER_KEY}
    env_file:
      - .env
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - mysql-db
    networks:
      - hh-network

  profile-api:
    container_name: profile-service
    build:
      context: ../profile-service
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - DATABASE_URL=${PROFILE_DB_URL}
      - SECRET_KEY=${JWT_SIGNER_KEY}
    env_file:
      - .env
    restart: unless-stopped
    ports:
      - "8000:8000"
    depends_on:
      - postgres-db
    networks:
      - hh-network

  blog-api:
    container_name: blog-service
    build:
      context: ../blog-service
      dockerfile: ../blog-service/blog-api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT}
      - ASPNETCORE_URLS=http://+:5050
      - SIGNER_KEY=${JWT_SIGNER_KEY}
      - DB_CONNECT=${BLOG_DB_URL}
    env_file:
      - .env
    restart: unless-stopped
    ports:
      - "5050:5050"
    networks:
      - hh-network


networks:
  hh-network:
    driver: bridge